{"version":3,"file":"static/js/689.f12177b3.chunk.js","mappings":"uKAgBA,IAXuB,WACrB,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAiCE,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAK,IAA3DC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAKxB,OAJAC,EAAAA,EAAAA,YAAU,WACRV,GAASW,EAAAA,EAAAA,IAAQT,GACnB,GAAG,CAACF,EAAUE,IAEP,CAACK,QAAAA,EAAUC,MAAAA,EAAOC,KAAAA,EAC3B,C,yJCkEA,WAAeG,EAAAA,EAAAA,IArEE,WACf,OAAiCC,EAAAA,EAAAA,KAAzBN,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAClBK,GAAWC,EAAAA,EAAAA,MACXf,GAAWC,EAAAA,EAAAA,OAEjBS,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLV,GAASgB,EAAAA,EAAAA,MACX,CACF,GAAG,CAAChB,IAEJ,IAAMiB,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAQ,GACRC,YAAa,IAEfC,iBAAkBC,EAAAA,EAClBC,SAAU,SAACC,GACTzB,GACE0B,EAAAA,EAAAA,IAAS,CACPxB,GAAIO,EAAKP,GACTkB,MAAOK,EAAOL,MACdC,YAAaI,EAAOJ,eAGrBM,SACAC,MAAK,kBAAMd,EAAS,IAAI,IACxBe,OACL,IAGF,OACE,UAAC,IAAI,CAACL,SAAUP,EAAOa,aAAa,WAClC,UAAC,UAAU,CAACC,UAAU,OAAOC,UAAU,4BAA2B,WAChE,SAAC,UAAU,qBACX,SAAC,YAAY,CACXC,KAAK,OACLC,KAAK,QACLC,SAAUlB,EAAOmB,aACjBC,MAAOpB,EAAOQ,OAAOL,MACrBkB,YAAarB,EAAOsB,OAAOnB,SAE7B,SAAC,qBAAqB,CAACa,KAAK,UAAS,SAClChB,EAAOsB,OAAOnB,YAGnB,UAAC,UAAU,CAACW,UAAU,OAAOC,UAAU,+BAA8B,WACnE,SAAC,UAAU,2BACX,SAAC,YAAY,CACXQ,GAAG,WACHC,KAAM,EACNP,KAAK,cACLC,SAAUlB,EAAOmB,aACjBC,MAAOpB,EAAOQ,OAAOJ,YACrBiB,YAAarB,EAAOsB,OAAOlB,eAE7B,SAAC,qBAAqB,CAACY,KAAK,UAAS,SAClChB,EAAOsB,OAAOlB,kBAGnB,SAAC,IAAc,CAACd,QAASA,EAASC,MAAOA,EAAM,UAC7C,SAAC,IAAM,CAACkC,QAAQ,UAAUT,KAAK,SAAQ,wBAM/C,G,qEC5EaV,EAAaoB,EAAAA,KAAaC,MAAM,CAC3CxB,MAAOuB,EAAAA,KACJE,IAAI,EAAG,wCACPC,IAAI,GAAI,2CACRC,SAAS,sBACZ1B,YAAasB,EAAAA,KAAaI,SAAS,4B,8CCGrC,IARkB,SAACC,GAKjB,OAJgB,SAACC,GAEf,OADmB7C,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAM6C,IAAI,IAA3CC,UACW,SAACH,EAAS,IAAK,qBACnC,CAEF,C","sources":["hooks/use-post-details.js","pages/EditPost.jsx","util/validationSchema.js","util/withGuard.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport { getPost } from \"../state/postSlice\";\r\n\r\nconst usePostDetails = () => {\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n  const { loading, error, post } = useSelector((state) => state.posts);\r\n  useEffect(() => {\r\n    dispatch(getPost(id));\r\n  }, [dispatch, id]);\r\n\r\n  return {loading , error, post};\r\n};\r\n\r\nexport default usePostDetails;\r\n","import usePostDetails from \"../hooks/use-post-details\";\r\nimport LoadingHandler from \"../components/LoadingHandler\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { editPost, clearPost } from \"../state/postSlice\";\r\nimport { useNavigate } from \"react-router\";\r\nimport WithGuard from \"../util/withGuard\";\r\nimport { useFormik } from \"formik\";\r\nimport { postSchema } from \"../util/validationSchema\";\r\n\r\nconst EditPost = () => {\r\n  const { loading, error, post } = usePostDetails();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(clearPost());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      title:  \"\",\r\n      description: \"\",\r\n    },\r\n    validationSchema: postSchema,\r\n    onSubmit: (values) => {\r\n      dispatch(\r\n        editPost({\r\n          id: post.id,\r\n          title: values.title,\r\n          description: values.description,\r\n        })\r\n      )\r\n        .unwrap()\r\n        .then(() => navigate(\"/\"))\r\n        .catch();\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit}>\r\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n        <Form.Label>Title</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"title\"\r\n          onChange={formik.handleChange}\r\n          value={formik.values.title}\r\n          isInvalid={!!formik.errors.title}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {formik.errors.title}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n      <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n        <Form.Label>Description</Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={3}\r\n          name=\"description\"\r\n          onChange={formik.handleChange}\r\n          value={formik.values.description}\r\n          isInvalid={!!formik.errors.description}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {formik.errors.description}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n      <LoadingHandler loading={loading} error={error}>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </LoadingHandler>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default WithGuard(EditPost);\r\n","import * as Yup from \"yup\";\r\n\r\nexport const postSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .min(2, \"Please insert 2 characters at Least!\")\r\n    .max(50, \"Please insert 50 characters at maximum!\")\r\n    .required(\"Title is required!\"),\r\n  description: Yup.string().required(\"Description is required\"),\r\n});\r\n\r\n","import { useSelector } from \"react-redux\";\r\n\r\nconst WithGuard = (Component) => {\r\n  const Wrapper = (props) => {\r\n    const {isLogged} = useSelector(state => state.auth)\r\n    return isLogged ? <Component/> : 'Please Login First!';\r\n  };\r\n  return Wrapper;\r\n};\r\n\r\nexport default WithGuard;\r\n"],"names":["dispatch","useDispatch","id","useParams","useSelector","state","posts","loading","error","post","useEffect","getPost","WithGuard","usePostDetails","navigate","useNavigate","clearPost","formik","useFormik","initialValues","title","description","validationSchema","postSchema","onSubmit","values","editPost","unwrap","then","catch","handleSubmit","className","controlId","type","name","onChange","handleChange","value","isInvalid","errors","as","rows","variant","Yup","shape","min","max","required","Component","props","auth","isLogged"],"sourceRoot":""}